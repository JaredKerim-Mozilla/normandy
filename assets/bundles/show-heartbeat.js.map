{"version":3,"file":"show-heartbeat.js","sources":["webpack:///webpack/bootstrap","webpack:///./client/actions/show-heartbeat/index.js","webpack:///./client/actions/utils.js","webpack:///(webpack)/buildin/global.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./client/actions/show-heartbeat/index.js\");\n","import { Action, registerAction } from '../utils';\n\nconst VERSION = 56; // Increase when changed.\n\n// 24 hours in milliseconds\nconst ONE_DAY = (1000 * 3600 * 24);\n\n// how much time should elapse between heartbeats?\nconst HEARTBEAT_THROTTLE = ONE_DAY;\n\nexport default class ShowHeartbeatAction extends Action {\n  constructor(normandy, recipe) {\n    super(normandy, recipe);\n\n    // 'local' storage\n    // (namespaced to recipe.id - only this heartbeat can access)\n    this.storage = normandy.createStorage(recipe.id);\n\n    // 'global' storage\n    // (constant namespace - all heartbeats can access)\n    this.heartbeatStorage = normandy.createStorage('normandy-heartbeat');\n\n    // context bindings\n    this.updateLastInteraction = this.updateLastInteraction.bind(this);\n    this.updateLastShown = this.updateLastShown.bind(this);\n  }\n\n  /**\n   * Returns a surveyId value. If recipe calls\n   * to include the Telemetry UUID value,\n   * then the UUID is attached to the surveyId\n   * in `<surveyId>::<userId>` format.\n   *\n   * @return {String} Survey ID, possibly with user UUID\n   */\n  generateSurveyId() {\n    const {\n      includeTelemetryUUID,\n      surveyId,\n    } = this.recipe.arguments;\n    const { userId } = this.normandy;\n\n    let value = surveyId;\n\n    // should user ID stuff be sent to telemetry?\n    if (includeTelemetryUUID && !!userId) {\n      // alter the survey ID to include that UUID\n      value = `${surveyId}::${userId}`;\n    }\n\n    return value;\n  }\n\n  /**\n   * Returns a boolean indicating if a heartbeat has been shown recently.\n   *\n   * Checks the saved `lastShown` value against the current time\n   * and returns if the time is under HEARTBEAT_THROTTLE milliseconds.\n   *\n   * @async\n   * @return {Boolean}  Has any heartbeat been shown recently?\n   */\n  async heartbeatShownRecently() {\n    const lastShown = await this.heartbeatStorage.getItem('lastShown');\n    const timeSince = lastShown\n      ? new Date() - parseFloat(lastShown) : Infinity;\n\n    // Return a boolean indicating if a heartbeat\n    // has shown within the last HEARTBEAT_THROTTLE ms\n    return timeSince < HEARTBEAT_THROTTLE;\n  }\n\n  /**\n   * Looks up the time the prompt was last displayed to the user,\n   * and converts it to a Number (if found).\n   *\n   * @async\n   * @return {number}   Timestamp of last prompt showing\n   */\n  async getLastShown() {\n    const lastShown = await this.storage.getItem('lastShown');\n    return typeof lastShown !== 'undefined'\n      ? parseFloat(lastShown) : null;\n  }\n\n  /**\n   * Return whether this survey has been seen by the user before.\n\n   * @async\n   * @return {Boolean}\n   */\n  async hasShownBefore() {\n    // Even if the stored date is unparsable due to weirdness in the user's\n    // storage, if there's _something_ stored then we probably have shown at\n    // least once.\n    return await this.storage.getItem('lastShown') !== null;\n  }\n\n  /**\n   * Determines if this heartbeat was shown\n   * at least x days ago.\n   *\n   * @param  {Number}  days Days ago to check\n   * @return {boolean}      Has prompt been shown by that date?\n   */\n  async shownAtleastDaysAgo(days) {\n    const hasShown = await this.hasShownBefore();\n\n    if (!hasShown) {\n      return false;\n    }\n\n    // get timestamp of last shown\n    const timeLastShown = await this.getLastShown();\n\n    // get the difference between now and then\n    const timeElapsed = Date.now() - timeLastShown;\n\n    // time limit is the number of days passed in\n    // converted into milliseconds\n    const timeLimit = ONE_DAY * days;\n\n    // if the diff is smaller than the limit,\n    // that means that the last time the user saw the prompt\n    // was less than the `days` passed in\n    return timeElapsed < timeLimit;\n  }\n\n  /**\n   * Simple function to read the lastInteraction\n   * timestamp (if any) from local storage.\n   * @return {number}   Timestamp of last prompt interaction (if any)\n   */\n  async getLastInteraction() {\n    const lastInteraction = await this.storage.getItem('lastInteraction');\n\n    return typeof lastInteraction !== 'undefined'\n      ? parseFloat(lastInteraction) : null;\n  }\n\n  /**\n   * Gets the timestamp of the last prompt interaction,\n   * and returns the time (in ms) since then.\n   *\n   * @async\n   * @return {number}\n   */\n  async sinceLastInteraction() {\n    const lastInteraction = await this.getLastInteraction();\n\n    return typeof lastInteraction !== 'undefined'\n      ? Date.now() - lastInteraction : null;\n  }\n\n  /**\n   * Checks when the survey prompt last had\n   * interaction from the user (if ever),\n   * and returns a boolean indicating if the\n   * user has ever had interaction\n   *\n   * @async\n   * @return {Boolean}  Has the survey ever had interaction?\n   */\n  async hasHadInteraction() {\n    const lastInteraction = await this.getLastInteraction();\n    return !!lastInteraction;\n  }\n\n  /**\n   * Checks the repeatOption argument for this recipe\n   * and determines if the recipe has fully executed.\n   *\n   * Each `repeatOption` setting has different requirements\n   * to consider the heartbeat as executed; `once` will appear to the\n   * user once and never again, while `nag` may appear to the user multiple times\n   * before it is interacted with and considers itself 'executed'.\n   *\n   * @return {boolean}   Has this recipe fulfilled its execution criteria?\n   */\n  async heartbeatHasExecuted() {\n    let hasShown = false;\n    const {\n      repeatOption,\n      repeatEvery,\n    } = this.recipe.arguments;\n\n    switch (repeatOption) {\n      // `once` is one and done\n      default:\n      case 'once':\n        hasShown = await this.hasShownBefore();\n        break;\n\n      // `nag` requires user interaction to go away\n      case 'nag':\n        hasShown = await this.hasHadInteraction();\n        break;\n\n      // `xdays` waits for `repeatEvery` days to show again\n      case 'xdays':\n        hasShown = await this.shownAtleastDaysAgo(repeatEvery);\n        break;\n    }\n\n    return hasShown;\n  }\n\n  /**\n   * Returns a boolean if the heartbeat should\n   * fall out of `execute` or not. Checks\n   * `testing` mode, and if heartbeats have\n   * been shown lately.\n   *\n   * @return {boolean}  Should the recipe execution halt?\n   */\n  async shouldNotExecute() {\n    return !this.normandy.testing\n      && (\n        // if a heartbeat has been shown in the past 24 hours\n        await this.heartbeatShownRecently()\n        // or this specific heartbeat has already ran\n        || this.heartbeatHasExecuted()\n      );\n  }\n\n  /**\n   * Main action function.\n   *\n   * Determines if the heartbeat should be shown,\n   * and if so, does so. Also records last shown\n   * times to local storage to track when any\n   * heartbeat was last shown to the user.\n   */\n  async execute() {\n    const {\n      message,\n      engagementButtonLabel,\n      thanksMessage,\n      postAnswerUrl,\n      learnMoreMessage,\n      learnMoreUrl,\n    } = this.recipe.arguments;\n\n    // determine if this should even run\n    if (await this.shouldNotExecute()) {\n      return;\n    }\n\n    this.client = await this.normandy.client();\n\n    // pull some data to attach to the telemetry business\n    const { userId } = this.normandy;\n    const surveyId = this.generateSurveyId();\n\n    // A bit redundant but the action argument names shouldn't necessarily rely\n    // on the argument names showHeartbeat takes.\n    const heartbeatData = {\n      surveyId,\n      message,\n      engagementButtonLabel,\n      thanksMessage,\n      learnMoreMessage,\n      learnMoreUrl,\n      postAnswerUrl: this.generatePostURL(postAnswerUrl, userId),\n      // generate a new uuid for this heartbeat flow\n      flowId: this.normandy.uuid(),\n      surveyVersion: this.recipe.revision_id,\n    };\n\n    // Add a flag to the heartbeat data if in test mode\n    if (this.normandy.testing) {\n      heartbeatData.testing = 1;\n    }\n\n    // show the prompt!\n    const heartBeat = await this.normandy.showHeartbeat(heartbeatData);\n\n    // list of events that the heartBeat will trigger\n    // based on the user's interaction with the browser chrome\n    const interactionEvents = ['Voted', 'Engaged'];\n\n    // Upon heartbeat interaction, we want to update the stored time\n    interactionEvents.forEach(event => {\n      heartBeat.on(event, this.updateLastInteraction);\n    });\n\n    // Let the record show that a heartbeat has been displayed\n    this.updateLastShown();\n  }\n\n  /**\n   * Updates the local storage values of when a/this heartbeat\n   * was last displayed to the user with the current time.\n   */\n  updateLastShown() {\n    // update the 'personal' storage of this heartbeat\n    this.storage.setItem('lastShown', Date.now());\n\n    // also update the 'global' storage of all heartbeats\n    this.heartbeatStorage.setItem('lastShown', Date.now());\n  }\n\n  /**\n   * Updates the local storage value of when this heartbeat\n   * received an interaction event from\n   */\n  updateLastInteraction() {\n    this.storage.setItem('lastInteraction', Date.now());\n  }\n\n  /**\n   * Gathers recipe action/message information, and formats the content into\n   * URL-safe query params. This is used by generatePostURL to\n   * inject Google Analytics params into the post-answer URL.\n   *\n   * @return {Object} Hash containing utm_ queries to append to post-answer URL\n   */\n  getGAParams() {\n    let message = this.recipe.arguments.message || '';\n    // remove spaces\n    message = message.replace(/\\s+/g, '');\n    // escape what we can\n    message = encodeURIComponent(message);\n\n    // use a fake URL object to get a legit URL-ified URL\n    const fakeUrl = new URL('http://mozilla.com');\n    fakeUrl.searchParams.set('message', message);\n    // pluck the (now encoded) message\n    message = fakeUrl.search.replace('?message=', '');\n\n    return {\n      utm_source: 'firefox',\n      utm_medium: this.recipe.action, // action name\n      utm_campaign: message, // 'shortenedmesssagetext'\n    };\n  }\n\n  /**\n   * Given a post-answer url (and optionally a userId), returns an\n   * updated string with query params of relevant data for the\n   * page the user will be directed to. Includes survey version,\n   * google analytics params, etc.\n   *\n   * @param  {String} url     Post-answer URL (without query params)\n   * @param  {String} userId? Optional, UUID to associate with user\n   * @return {String}         URL with post-answer query params\n   */\n  generatePostURL(url, userId) {\n    // Don't bother with empty URLs.\n    if (!url) {\n      return url;\n    }\n\n    const args = {\n      source: 'heartbeat',\n      surveyversion: VERSION,\n      updateChannel: this.client.channel,\n      fxVersion: this.client.version,\n      isDefaultBrowser: this.client.isDefaultBrowser ? 1 : 0,\n      searchEngine: this.client.searchEngine,\n      syncSetup: this.client.syncSetup ? 1 : 0,\n      // Google Analytics parameters\n      ...this.getGAParams(),\n    };\n\n    // if a userId is given,\n    // we'll include it with the data passed through\n    // to SurveyGizmo (via query params)\n    if (this.recipe.arguments.includeTelemetryUUID && userId) {\n      args.userId = userId;\n    }\n\n    // Append testing parameter if in testing mode.\n    if (this.normandy.testing) {\n      args.testing = 1;\n    }\n\n    // create a URL object to append arguments to\n    const annotatedUrl = new URL(url);\n    for (const key in args) {\n      if (!args.hasOwnProperty(key)) {\n        continue;\n      }\n      // explicitly set the query param\n      // (this makes our args URL-safe)\n      annotatedUrl.searchParams.set(key, args[key]);\n    }\n\n    // return the address with encoded queries\n    return annotatedUrl.href;\n  }\n}\n\nregisterAction('show-heartbeat', ShowHeartbeatAction);\n","export class Action {\n  constructor(normandy, recipe) {\n    this.normandy = normandy;\n    this.recipe = recipe;\n  }\n}\n\n// Attempt to find the global registerAction, and fall back to a noop if it's\n// not available.\nexport const registerAction = (\n  (global && global.registerAction)\n  || (window && window.registerAction)\n  || function registerAction() {}\n);\n\n// Same as above, for registerAsyncCallback\nexport const registerAsyncCallback = (\n  (global && global.registerAsyncCallback)\n  || (window && window.registerAsyncCallback)\n  || function registerAsyncCallback() {}\n);\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClzYA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}