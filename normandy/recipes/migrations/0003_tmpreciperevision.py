# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2018-05-02 19:29
# flake8: noqa
from __future__ import unicode_literals

import hashlib

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import normandy.recipes.fields
import normandy.recipes.validators


def create_tmp_from_revision(apps, revision, parent=None):
    ApprovalRequest = apps.get_model('recipes', 'ApprovalRequest')
    TmpRecipeRevision = apps.get_model('recipes', 'TmpRecipeRevision')

    tmp = TmpRecipeRevision(
        created=revision.created, updated=revision.updated, comment=revision.comment,
        name=revision.name, arguments_json=revision.arguments_json,
        extra_filter_expression=revision.extra_filter_expression,
        identicon_seed=revision.identicon_seed, action=revision.action, parent=parent, 
        recipe=revision.recipe, user=revision.user)

    tmp.save()

    if revision.approved_for_recipe.count():
        tmp.approved_for_recipe.add(revision.approved_for_recipe.get())

    if revision.latest_for_recipe.count():
        tmp.latest_for_recipe.add(revision.latest_for_recipe.get())

    try:
        revision.approval_request.tmp_revision = tmp
    except ApprovalRequest.DoesNotExist:
        pass

    for channel in revision.channels.all():
        tmp.channels.add(channel)

    for country in revision.countries.all():
        tmp.countries.add(country)

    for locale in revision.locales.all():
        tmp.locales.add(locale)

    return tmp


def copy_revisions_to_tmp(apps, schema_editor):
    RecipeRevision = apps.get_model('recipes', 'RecipeRevision')

    for revision in RecipeRevision.objects.filter(parent=None):
        current = revision
        parent = create_tmp_from_revision(apps, current)

        try:
            while current.child:
                parent = create_tmp_from_revision(apps, current.child, parent=parent)
                current = current.child
        except RecipeRevision.DoesNotExist:
            pass


def get_filter_expression(revision):
    parts = []

    if revision.locales.count():
        locales = ', '.join(["'{}'".format(l.code) for l in revision.locales.all()])
        parts.append('normandy.locale in [{}]'.format(locales))

    if revision.countries.count():
        countries = ', '.join(["'{}'".format(c.code) for c in revision.countries.all()])
        parts.append('normandy.country in [{}]'.format(countries))

    if revision.channels.count():
        channels = ', '.join(["'{}'".format(c.slug) for c in revision.channels.all()])
        parts.append('normandy.channel in [{}]'.format(channels))

    if revision.extra_filter_expression:
        parts.append(revision.extra_filter_expression)

    expression = ') && ('.join(parts)

    return '({})'.format(expression) if len(parts) > 1 else expression


def hash(revision):
    data = '{}{}{}{}{}{}'.format(revision.recipe.id, revision.created, revision.name,
                                 revision.action.id, revision.arguments_json,
                                 get_filter_expression(revision))
    return hashlib.sha256(data.encode()).hexdigest()


def create_revision_from_tmp(apps, tmp, parent=None):
    ApprovalRequest = apps.get_model('recipes', 'ApprovalRequest')
    RecipeRevision = apps.get_model('recipes', 'RecipeRevision')

    rev = RecipeRevision(
        created=tmp.created, updated=tmp.updated, comment=tmp.comment, name=tmp.name,
        arguments_json=tmp.arguments_json, extra_filter_expression=tmp.extra_filter_expression,
        identicon_seed=tmp.identicon_seed, action=tmp.action, parent=parent, recipe=tmp.recipe,
        user=tmp.user)

    rev.id = hash(rev)

    rev.save()

    if tmp.approved_for_recipe.count():
        rev.approved_for_recipe.add(tmp.approved_for_recipe.get())

    if tmp.latest_for_recipe.count():
        rev.latest_for_recipe.add(tmp.latest_for_recipe.get())

    try:
        tmp.approval_request.revision = rev
    except ApprovalRequest.DoesNotExist:
        pass

    for channel in tmp.channels.all():
        rev.channels.add(channel)

    for country in tmp.countries.all():
        rev.countries.add(country)

    for locale in tmp.locales.all():
        rev.locales.add(locale)

    # Rehash with m2m data
    rev.id = hash(rev)
    rev.save()


def copy_tmp_to_revisions(apps, schema_editor):
    TmpRecipeRevision = apps.get_model('recipes', 'TmpRecipeRevision')

    for revision in TmpRecipeRevision.objects.filter(parent=None):
        current = revision
        create_revision_from_tmp(apps, current)

        try:
            while current.child:
                create_revision_from_tmp(apps, current.child, parent=current)
                current = current.child
        except TmpRecipeRevision.DoesNotExist:
            pass


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('recipes', '0002_auto_20180406_1701'),
    ]

    operations = [
        migrations.CreateModel(
            name='TmpRecipeRevision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('comment', models.TextField()),
                ('name', models.CharField(max_length=255)),
                ('arguments_json', models.TextField(default='{}', validators=[normandy.recipes.validators.validate_json])),
                ('extra_filter_expression', models.TextField()),
                ('identicon_seed', normandy.recipes.fields.IdenticonSeedField(max_length=64)),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recipes.Action')),
                ('channels', models.ManyToManyField(to='recipes.Channel')),
                ('countries', models.ManyToManyField(to='recipes.Country')),
                ('locales', models.ManyToManyField(to='recipes.Locale')),
                ('parent', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child', to='recipes.TmpRecipeRevision')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recipes.Recipe')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.AddField(
            model_name='recipe',
            name='approved_tmp_revision',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='approved_for_recipe',
                                    to='recipes.TmpRecipeRevision'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='latest_tmp_revision',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='latest_for_recipe',
                                    to='recipes.TmpRecipeRevision'),
        ),
        migrations.AlterField(
            model_name='approvalrequest',
            name='revision',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                       related_name='approval_request',
                                       to='recipes.RecipeRevision'),
        ),
        migrations.AddField(
            model_name='approvalrequest',
            name='tmp_revision',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                       related_name='approval_request',
                                       to='recipes.TmpRecipeRevision'),
        ),
        migrations.RunPython(copy_revisions_to_tmp, copy_tmp_to_revisions),
        migrations.RemoveField(
            model_name='approvalrequest',
            name='revision',
        ),
        migrations.RemoveField(
            model_name='recipe',
            name='approved_revision',
        ),
        migrations.RemoveField(
            model_name='recipe',
            name='latest_revision',
        ),
    ]
