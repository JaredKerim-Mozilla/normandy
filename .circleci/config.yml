# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER
# DOCKER_PASS
#
version: 2
jobs:
  lint:
    docker:
      # Image with Python/Node and therapist pre-installed
      - image: mozilla/cidockerbases:therapist-latest

    working_directory: ~/repo

    steps:
      - checkout

      # Install python dependencies
      - run:
          name: Create virtualenv
          command: |
            python3 -m venv ~/venv
            echo "source ~/venv/bin/activate" >> $BASH_ENV

      - run:
          name: Install python dependencies
          command: pip install -U -r requirements/default.txt -c requirements/constraints.txt --require-hashes

      # Download and cache node dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "yarn.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-

      - run:
          name: Install node dependencies
          command: yarn install --frozen-lockfile

      - save_cache:
          paths:
            - "node_modules"
          key: v2-dependencies-{{ checksum "yarn.lock" }}

      # Run lint suite using therapist
      - run:
          name: Lint
          command: therapist run --use-tracked-files

  build-test-publish:
    docker:
      - image: mozilla/cidockerbases:docker-latest

    working_directory: ~/normandy

    environment:
      COMPOSE_FILE: ci/docker-compose.yml

    steps:
      - checkout

      - setup_remote_docker:
          version: 17.09.0-ce
          docker_layer_caching: true

      - run:
          name: Create version.json
          command: |
            # store version info in app directory, for Docker to pick up
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
              "$CIRCLE_SHA1" \
              "${CIRCLE_TAG-}" \
              "$CIRCLE_PROJECT_USERNAME" \
              "$CIRCLE_PROJECT_REPONAME" \
              "$CIRCLE_BUILD_URL" \
              > version.json

      - run:
          name: Starting artifact collector
          command: docker-compose run --user root artifact-collector
          background: true

      - run:
          name: Build and download Docker images
          # Build all local images, and pull all remote images, so that later
          # steps have everything they need already prepared. Note that "pull"
          # requires an explicit list so it doesn't try to pull images that
          # have already been built.
          command: |
            ./bin/download_geolite2.sh
            docker-compose build
            docker-compose pull db

      - run:
          name: Python Tests
          command: docker-compose run web python-tests

      - run:
          name: Missing migrations
          command: docker-compose run web migrations-check

      - run:
          name: Contract tests
          command: |
            docker-compose up -d web
            docker-compose run web contracttest
            docker-compose kill web

      - run:
          name: JavaScript tests
          command: |
            docker-compose up -d js-tests-browser
            docker-compose up js-tests
            docker-compose kill js-tests-browser

      - run:
          name: Copy Artifacts
          when: always # run even if previous run commands failed
          command: |
            docker cp $(docker-compose ps -q artifact-collector):/artifacts /artifacts
            ls /artifacts

      - store_artifacts:
          path: /artifacts

      - store_test_results:
          path: /artifacts/test_results

      - run:
          name: Push to Dockerhub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              ./ci/deploy.sh latest
            fi
            if [ -n "${CIRCLE_TAG}" ]; then
              ./ci/deploy.sh "$CIRCLE_TAG"
            fi

  docs-build:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Create virtualenv
          command: |
            python3 -m venv ~/venv
            echo "source ~/venv/bin/activate" >> $BASH_ENV
      - run:
          name: Install requirements
          command: pip install -r requirements/docs.txt
      - run:
          name: Build docs
          command: |
            cd docs
            make html
      - persist_to_workspace:
          root: docs/_build
          paths: html
      - store_artifacts:
          path: docs/_build/html

  docs-publish:
    docker:
      - image: node:10
    steps:
      - checkout
      - attach_workspace:
          at: docs/_build
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g gh-pages@2
            git config user.email "ci-build@normandy.mozilla.org"
            git config user.name "ci-build"
      - run:
          name: Disable jekyll builds
          command: touch docs/_build/html/.nojekyll
      - add_ssh_keys:
          fingerprints:
            - "5d:91:56:44:f2:f7:57:2a:29:88:f0:2e:37:fe:86:2a"
      - run:
          name: Deploy docs to gh-pages
          command: gh-pages --dotfiles --message "[skip ci] Docs updates" --dist docs/_build/html

workflows:
  version: 2
  main:
    jobs:
      - lint
          # run on all tags, as well as the default of all other commits
          filters:
            tags:
              only: /.*/
      - build-test-publish:
          requires:
            - lint
          # run on all tags, as well as the default of all other commits
          filters:
            tags:
              only: /.*/
      - docs-build
      - docs-publish:
          requires:
            - docs-build
          filters:
            branches:
              only: master
