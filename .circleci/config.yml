# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER
# DOCKER_PASS
#

version: 2

jobs:
  lint:
    docker:
      # Image with Python/Node and therapist pre-installed
      - image: mozilla/cidockerbases:therapist-latest

    environment:
      # Use Test configuration so that development dependencies aren't needed
      DJANGO_CONFIGURATION: "Test"
      # Use an in-memory database so that the migrations check doesn't try to access a real database
      DATABASE_URL: "sqlite://:memory:"
      # Ignore warning and info checks about not applying migrations, and about missing geoip database
      DJANGO_SILENCED_SYSTEM_CHECKS: "dockerflow.health.W001,normandy.recipes.I001,normandy.recipes.I002,normandy.recipes.I003,normandy.recipes.E006"

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: Create virtualenv
          command: |
            python3 -m venv ~/venv
            echo "source ~/venv/bin/activate" >> $BASH_ENV
      - run:
          name: Install python dependencies
          command: pip install -r requirements/default.txt
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "yarn.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-
      - run:
          name: Install node dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          paths:
            - "node_modules"
          key: v2-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Lint
          command: therapist run --use-tracked-files

  docker-image-build:
    docker:
      - image: mozilla/cidockerbases:docker-latest
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.09.0-ce
      - run:
          name: Create version.json
          command: |
            # store version info in app directory, for Docker to pick up
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
              "$CIRCLE_SHA1" \
              "${CIRCLE_TAG-}" \
              "$CIRCLE_PROJECT_USERNAME" \
              "$CIRCLE_PROJECT_REPONAME" \
              "$CIRCLE_BUILD_URL" \
              > version.json
      - run:
          name: Build Docker image
          command: docker build -t normandy:web .
      - run:
          name: Save image into workspace
          command: |
            mkdir -p workspace
            docker save -o workspace/normandy-web.tar normandy:web
            gzip workspace/normandy-web.tar
      - persist_to_workspace:
          root: workspace
          paths:
            - normandy-web.tar.gz

  docker-image-publish:
    docker:
      - image: mozilla/cidockerbases:docker-latest
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.09.0-ce
      - attach_workspace:
          at: workspace
      - run:
          name: Load Docker image from workspace
          command: docker load -i workspace/normandy-web.tar.gz
      - run:
          name: Push to Dockerhub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              ./ci/deploy.sh latest
            fi
            if [ -n "${CIRCLE_TAG}" ]; then
              ./ci/deploy.sh "$CIRCLE_TAG"
            fi

  docs-build:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Create virtualenv
          command: |
            python3 -m venv ~/venv
            echo "source ~/venv/bin/activate" >> $BASH_ENV
      - run:
          name: Install requirements
          command: pip install -r requirements/docs.txt
      - run:
          name: Build docs
          command: |
            cd docs
            make html
      - persist_to_workspace:
          root: docs/_build
          paths: html
      - store_artifacts:
          path: docs/_build/html

  docs-publish:
    docker:
      - image: node:10
    steps:
      - checkout
      - attach_workspace:
          at: docs/_build
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g gh-pages@2
            git config user.email "ci-build@normandy.mozilla.org"
            git config user.name "ci-build"
      - run:
          name: Disable jekyll builds
          command: touch docs/_build/html/.nojekyll
      - add_ssh_keys:
          fingerprints:
            - "5d:91:56:44:f2:f7:57:2a:29:88:f0:2e:37:fe:86:2a"
      - run:
          name: Deploy docs to gh-pages
          command: gh-pages --dotfiles --message "[skip ci] Docs updates" --dist docs/_build/html

  python-tests:
    docker:
      - image: circleci/python:3.7-node-browsers
      - image: circleci/postgres:9.6

    steps:
      - checkout
      - run:
          name: Fetch Geolite database
          command: ./bin/download_geolite2.sh
      - run:
          name: Create virtualenv
          command: |
            python3 -m venv ~/venv
            echo "source ~/venv/bin/activate" >> $BASH_ENV
      - run:
          name: Install python dependencies
          command: pip install -r requirements/default.txt
      - run:
          name: Install node dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Python tests
          command: |
            mkdir test-reports
            py.test normandy \
              --tb=short -vvv \
              --junitxml=test-reports/junit.xml
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

  js-tests:
    docker:
      - image: mozilla/cidockerbases:firefox-latest

    steps:
      - checkout
      - run:
          name: Install node dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: JS tests
          environment:
            JUNIT_REPORT_PATH: ./junit/
            JUNIT_REPORT_NAME: test-results.xml
          command: |
            mkdir -p $JUNIT_REPORT_PATH
            yarn karma start ./karma.conf.js --single-run
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

  contract-tests:
    docker:
      - image: circleci/python:3.7-node-browsers
      - image: circleci/postgres:9.6
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: normandy

    environment:
      DJANGO_SETTINGS_MODULE: normandy.settings
      DJANGO_CONFIGURATION: ProductionInsecure

    steps:
      - checkout
      - run:
          name: Fetch Geolite database
          command: ./bin/download_geolite2.sh
      - run:
          name: Create virtualenv
          command: |
            python3 -m venv ~/venv
            echo "source ~/venv/bin/activate" >> $BASH_ENV
      - run:
          name: Install python dependencies
          command: pip install -r requirements/default.txt
      - run:
          name: Install node dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Create version.json
          command: |
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
              "$CIRCLE_SHA1" \
              "${CIRCLE_TAG-}" \
              "$CIRCLE_PROJECT_USERNAME" \
              "$CIRCLE_PROJECT_REPONAME" \
              "$CIRCLE_BUILD_URL" \
              > version.json
      - run:
          name: Prepare DB
          command: |
            ./manage.py migrate
            ./manage.py update_actions
      - run:
          name: Starting server
          command: gunicorn normandy.wsgi:application --bind localhost:8000
          background: true
      - run:
          name: Waiting for web server to be available
          command: |
            ./ci/wait-for-it.sh localhost:8000 \
              --timeout=30 --strict \
              -- echo "Done waiting. It should work now."
      - run:
          name: Contract tests
          command: |
            mkdir test-reports
            py.test contract-tests \
              --tb=short -vvv \
              --junitxml=test-reports/junit.xml \
              --server http://localhost:8000

workflows:
  version: 2
  main:
    jobs:
      # By default CircleCI does not run any jobs on tags. To allow a job to
      # run on a tag, we specify `filters.tags.only: /.*/`. That does not
      # affect whether or not the job will run on PRs or on untagged master
      # commits. By default all jobs listed run on all commits in PRs and on
      # master (unless otherwise filtered).

      # Group: Tests and lints
      - python-tests:
          filters:
            tags:
              only: /.*/
      - js-tests:
          filters:
            tags:
              only: /.*/
      - lint:
          filters:
            tags:
              only: /.*/
      - contract-tests:
          filters:
            tags:
              only: /.*/

      # Group: Building artifacts
      - docs-build
      - docker-image-build:
          filters:
            tags:
              only: /.*/

      # Group: Publish
      # All of these should only run on master and tags
      - docs-publish:
          requires:
            - docs-build
          filters:
            branches:
              only: master
      - docker-image-publish:
          requires:
            - python-tests
            - js-tests
            - contract-tests
            - js-tests
            - lint
            - docker-image-build
          filters:
            branches:
              only: master
            tags:
              only: /v.*/